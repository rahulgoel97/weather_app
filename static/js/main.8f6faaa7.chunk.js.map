{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAGMA,EACA,mCADAA,EAEE,2CAsEOC,MAnEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA8Bb,OACE,qBAAKC,UAAU,MAAf,SACE,iCAEC,qBAAKA,UAAU,aAAf,SACE,uBACAC,KAAK,OACLD,UAAU,aACVE,YAAY,YACXC,SAAU,SAAAC,GAAC,OAAEP,EAASO,EAAEC,OAAOC,QAC/BA,MAAOV,EACPW,WArCO,SAAAC,GACA,UAAVA,EAAIC,KACLC,MAAM,GAAD,OAAIjB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACrDkB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJf,EAAWe,GACXjB,EAAS,IACTkB,QAAQC,IAAIF,WAkCS,oBAAhBhB,EAAQmB,KACjB,gCACI,sBAAKjB,UAAU,eAAf,UACI,sBAAKA,UAAU,WAAf,cAA4BF,EAAQoB,KAApC,IAA2C,IAAKpB,EAAQqB,IAAIC,WAC5D,qBAAKpB,UAAU,OAAf,SAhCM,SAACqB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAuBCE,CAAY,IAAIC,WAE3C,sBAAK/B,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UACAgC,KAAKC,MAAMnC,EAAQmB,KAAKiB,MADxB,WAGN,qBAAKlC,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGmB,aAG1C,SCtDEkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8f6faaa7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\n\nconst api={\n  key:\"33a7dca3405b89df6ed01206bb17056b\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if(evt.key===\"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n          .then(res=>res.json())\n          .then(result=>{\n            setWeather(result);\n            setQuery('');\n            console.log(result);\n          });\n\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n\n  return (\n    <div className=\"app\">\n      <main>\n\n      \t<div className=\"search-box\">\n        \t<input \n        \ttype=\"Text\"\n        \tclassName=\"search-bar\"\n        \tplaceholder=\"Search...\"\n          onChange={e=>setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n        \t/>\n      \t</div>\n\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n            <div className=\"location-box\">\n                <div className=\"location\"> {weather.name},{' '}{weather.sys.country}</div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n            <div className=\"weather-box\">\n                <div className=\"temp\">\n               {Math.round(weather.main.temp)}Â°C\n                </div>\n          <div className=\"weather\">{weather.weather[0].main}</div>\n        </div>\n          </div>\n        ) : ('')}\n       \n        \n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}